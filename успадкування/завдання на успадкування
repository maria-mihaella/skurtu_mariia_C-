using System;

// Task 1: Figure
public class Figure
{
    public virtual double CalculateArea()
    {
        return 0;
    }

    public virtual double CalculatePerimeter()
    {
        return 0;
    }
}

public class Circle : Figure
{
    public double Radius { get; set; }

    public override double CalculateArea()
    {
        return Math.PI * Math.Pow(Radius, 2);
    }

    public override double CalculatePerimeter()
    {
        return 2 * Math.PI * Radius;
    }
}

public class Rectangle : Figure
{
    public double Width { get; set; }
    public double Height { get; set; }

    public override double CalculateArea()
    {
        return Width * Height;
    }

    public override double CalculatePerimeter()
    {
        return 2 * (Width + Height);
    }
}

// Task 2: Fruit
public class Fruit
{
    public string Name { get; set; }
}

public class Apple : Fruit
{
    public string Variety { get; set; }
    public string Color { get; set; }
}

public class Pear : Fruit
{
    public string Variety { get; set; }
    public string Color { get; set; }
}

// Task 3: Animals
public abstract class Animal
{
    public float Weight { get; set; }
    public string Color { get; set; }

    public Animal(string color, float weight)
    {
        Color = color;
        Weight = weight;
    }

    public abstract string MakeSound();
}

public abstract class AnimalWithTail : Animal
{
    public float TailLength { get; set; }

    public AnimalWithTail(string color, float weight, float tailLength) : base(color, weight)
    {
        TailLength = tailLength;
    }
}

public class Cat : AnimalWithTail
{
    public Cat(string color, float weight, float tailLength) : base(color, weight, tailLength) { }

    private string Purr()
    {
        return "purrrrrrrr";
    }

    private string Meow()
    {
        return "Meow";
    }

    public override string MakeSound()
    {
        return Purr() + Meow();
    }

    public override string ToString()
    {
        return $"This is a Cat, Color = {Color}, Weight = {Weight}, TailLength = {TailLength}";
    }
}

public class Dog : AnimalWithTail
{
    public Dog(string color, float weight, float tailLength) : base(color, weight, tailLength) { }

    public override string MakeSound()
    {
        return "Woof";
    }

    public override string ToString()
    {
        return $"This is a Dog, Color = {Color}, Weight = {Weight}, TailLength = {TailLength}";
    }
}

class Program
{
    static void Main()
    {
        // Task 1:
        Figure circle = new Circle { Radius = 7 };
        Figure rectangle = new Rectangle { Width = 2, Height = 5 };
        PrintFigureInfo(circle, "Circle");
        PrintFigureInfo(rectangle, "Rectangle");

        // Task 2:
        Fruit apple = new Apple { Name = "Apple", Variety = "Jonathan", Color = "Red" };
        Fruit pear = new Pear { Name = "Pear", Variety = "Bartlett", Color = "Yellow" };
        PrintFruitInfo(apple);
        PrintFruitInfo(pear);

        // Task 3:
        Animal cat = new Cat("White", 6.4f, 14.2f);
        Animal dog = new Dog("Brown", 12.3f, 18.7f);
        PrintAnimalInfo(cat);
        PrintAnimalInfo(dog);
    }

    static void PrintFigureInfo(Figure figure, string name)
    {
        Console.WriteLine($"{name} - Area: {figure.CalculateArea()}, Perimeter: {figure.CalculatePerimeter()}");
    }

    static void PrintFruitInfo(Fruit fruit)
    {
        Console.WriteLine($"{fruit.Name} - Name: {fruit.Name}, Variety: {((fruit is Apple) ? (fruit as Apple).Variety : (fruit as Pear).Variety)}, Color: {((fruit is Apple) ? (fruit as Apple).Color : (fruit as Pear).Color)}");
    }

    static void PrintAnimalInfo(Animal animal)
    {
        Console.WriteLine(animal);
        Console.WriteLine($"Animal sound: {animal.MakeSound()}");
    }
}
